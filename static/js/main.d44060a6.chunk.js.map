{"version":3,"sources":["App.js","Registration.js","serviceWorker.js","index.js"],"names":["Component","App","props","state","email","password","password_confirmation","RegistrationErrors","handleSubmit","bind","handleChange","event","console","log","this","axios","post","user","withCredentials","then","response","catch","error","preventDefault","setState","target","name","value","className","onSubmit","type","placeholder","onChange","required","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","Registration","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"oQAMkBA,Y,+BCkFHC,E,kDAhFd,WAAYC,GAAQ,IAAD,8BAClB,cAAMA,IACDC,MAAQ,CACZC,MAAO,GACPC,SAAU,GACVC,sBAAuB,GACvBC,mBAAoB,IAGrB,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBAVF,E,yDAaNE,GACZC,QAAQC,IAAI,kBACZD,QAAQC,IAAIC,KAAKX,OACjBY,IAAMC,KAAK,8FAA8F,CACxGC,KAAM,CACLb,MAAOU,KAAKX,MAAMC,MAClBC,SAAUS,KAAKX,MAAME,SACrBC,sBAAuBQ,KAAKX,MAAMG,wBAGpC,CAACY,iBAAiB,IAEjBC,MAAM,SAAAC,GACNR,QAAQC,IAAI,mBAAmBO,MAE/BC,OAAM,SAAAC,GACNV,QAAQC,IAAI,QAAQS,MAErBX,EAAMY,mB,mCAEMZ,GACZG,KAAKU,SAAL,eACEb,EAAMc,OAAOC,KAAOf,EAAMc,OAAOE,QAEnCf,QAAQC,IAAI,mB,+BAIZ,OACC,yBAAKe,UAAU,OACd,0BAAMC,SAAUf,KAAKN,cACrB,6BAAM,6BACL,2BACCsB,KAAK,QACLF,UAAU,aACVF,KAAK,QACLK,YAAY,QACZJ,MAAOb,KAAKX,MAAMC,MAClB4B,SAAUlB,KAAKJ,aACfuB,UAAQ,IACP,6BAAM,6BACR,2BACCH,KAAK,WACLF,UAAU,aACVF,KAAK,WACLK,YAAY,WACZJ,MAAOb,KAAKX,MAAME,SAClB2B,SAAUlB,KAAKJ,aACfuB,UAAQ,IACP,6BAAM,6BACR,2BACCH,KAAK,WACLF,UAAU,aACVF,KAAK,wBACLK,YAAY,mBACZJ,MAAOb,KAAKX,MAAMG,sBAClB0B,SAAUlB,KAAKJ,aACfuB,UAAQ,IACP,6BAAM,6BACR,4BAAQH,KAAK,UAAb,YACA,6BAAM,mC,GA1EO9B,aCKEkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACR,kBAAC,IAAMC,WAAP,KAEC,6BAAS,6BACT,kBAACC,EAAD,OAEDC,SAASC,eAAe,SDsHnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5B,MAAK,SAAA6B,GACJA,EAAaC,gBAEd5B,OAAM,SAAAC,GACLV,QAAQU,MAAMA,EAAM4B,a","file":"static/js/main.d44060a6.chunk.js","sourcesContent":["// App.js\nimport React, { Component } from \"react\";\n// import ReactDOM from 'react-dom';\nimport \"./App.css\";\n// import { connect, sendMsg } from \"./api\";\n\nclass App extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tnum1: '',\n\t\t\tnum2: '',\n\t\t\ttotal: ''\n\t\t}\t\t\n\t}\n\taddNumber(){\n\t\tconsole.log(\"Num1: \", this.state.num1, \" Num2: \", this.state.num2)\n\t\tthis.setState({ total: parseInt(this.state.num1) + parseInt(this.state.num2) })\n\t\tconsole.log(this.state)\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<h1>Add Two Numbers</h1>\n\t\t\t\t<input type=\"text\" className=\"inputStyle\" value={this.state.num1} onChange={(eve) => { this.setState({ num1: eve.target.value }) }} />\n\t\t\t\t<br /><br />\n\t\t\t\t<input type=\"text\" className=\"inputStyle\" value={this.state.num2} onChange={(eve) => { this.setState({ num2: eve.target.value }) }} />\n\t\t\t\t<br /><br />\n\t\t\t\t<button onClick={() => { this.addNumber() }} >Add Numbers</button>\n\t\t\t\t<br /><br />\n\t\t\t\t<input type=\"text\" className=\"outStyle\" value={this.state.total} />\n\t\t\t\t<br /><br />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;","// App.js\nimport React, { Component } from \"react\";\nimport axios from \"axios\";\n// import ReactDOM from 'react-dom';\nimport \"./App.css\";\n// import { connect, sendMsg } from \"./api\";\n\nclass App extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\temail: \"\",\n\t\t\tpassword: \"\",\n\t\t\tpassword_confirmation: \"\",\n\t\t\tRegistrationErrors: \"\"\n\t\t}\n\n\t\tthis.handleSubmit = this.handleSubmit.bind(this);\n\t\tthis.handleChange = this.handleChange.bind(this);\n\t}\n\n\thandleSubmit(event) {\n\t\tconsole.log(\"form submitted\");\n\t\tconsole.log(this.state);\n\t\taxios.post(\"https://sysdesign-auth-qa.herokuapp.com/twirp/twirp.example.haberdasher.Haberdasher/AddUser\",{\n\t\t\tuser: {\n\t\t\t\temail: this.state.email,\n\t\t\t\tpassword: this.state.password,\n\t\t\t\tpassword_confirmation: this.state.password_confirmation\n\t\t\t}\n\t\t},\n\t\t{withCredentials: true}\n\t\t)\n\t\t.then( response =>{\n\t\t\tconsole.log(\"registration res\",response);\n\t\t})\n\t\t.catch(error=>{\n\t\t\tconsole.log(\"error\",error);\n\t\t})\n\t\tevent.preventDefault();\n\t}\n\thandleChange(event) {\n\t\tthis.setState({\n\t\t\t[event.target.name]: event.target.value\n\t\t});\n\t\tconsole.log(\"handle change\");\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<form onSubmit={this.handleSubmit}>\n\t\t\t\t<br /><br />\n\t\t\t\t\t<input \n\t\t\t\t\t\ttype=\"email\"\n\t\t\t\t\t\tclassName=\"inputStyle\" \n\t\t\t\t\t\tname=\"email\" \n\t\t\t\t\t\tplaceholder=\"Email\" \n\t\t\t\t\t\tvalue={this.state.email} \n\t\t\t\t\t\tonChange={this.handleChange} \n\t\t\t\t\t\trequired \n\t\t\t\t\t/><br /><br />\n\t\t\t\t\t<input \n\t\t\t\t\t\ttype=\"password\"\n\t\t\t\t\t\tclassName=\"inputStyle\" \n\t\t\t\t\t\tname=\"password\" \n\t\t\t\t\t\tplaceholder=\"Password\" \n\t\t\t\t\t\tvalue={this.state.password} \n\t\t\t\t\t\tonChange={this.handleChange} \n\t\t\t\t\t\trequired \n\t\t\t\t\t/><br /><br />\n\t\t\t\t\t<input \n\t\t\t\t\t\ttype=\"password\" \n\t\t\t\t\t\tclassName=\"inputStyle\"\n\t\t\t\t\t\tname=\"password_confirmation\" \n\t\t\t\t\t\tplaceholder=\"Confirm Password\" \n\t\t\t\t\t\tvalue={this.state.password_confirmation} \n\t\t\t\t\t\tonChange={this.handleChange} \n\t\t\t\t\t\trequired \n\t\t\t\t\t/><br /><br />\n\t\t\t\t\t<button type=\"submit\">Register</button>\n\t\t\t\t\t<br /><br />\n\t\t\t\t</form>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Registration from './Registration';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t{/* <App /> */}\n\t\t<br></br><br></br>\n\t\t<Registration />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}